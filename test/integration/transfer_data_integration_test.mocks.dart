// Mocks generated by Mockito 5.4.5 from annotations
// in budget_app/test/integration/transfer_data_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i17;

import 'package:budget_app/core/type_defs.dart' as _i9;
import 'package:budget_app/data/datasources/apis/user_api.dart' as _i12;
import 'package:budget_app/data/datasources/offline/budget_local.dart' as _i13;
import 'package:budget_app/data/datasources/offline/transaction_local.dart'
    as _i15;
import 'package:budget_app/data/datasources/offline/user_local.dart' as _i7;
import 'package:budget_app/data/models/budget_model.dart' as _i14;
import 'package:budget_app/data/models/transaction_model.dart' as _i16;
import 'package:budget_app/data/models/user_model.dart' as _i2;
import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i6;
import 'package:fpdart/fpdart.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseApp_1 extends _i1.SmartFake implements _i3.FirebaseApp {
  _FakeFirebaseApp_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettings_2 extends _i1.SmartFake implements _i4.Settings {
  _FakeSettings_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionReference_3<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWriteBatch_4 extends _i1.SmartFake implements _i4.WriteBatch {
  _FakeWriteBatch_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoadBundleTask_5 extends _i1.SmartFake
    implements _i4.LoadBundleTask {
  _FakeLoadBundleTask_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_6<T1 extends Object?> extends _i1.SmartFake
    implements _i4.QuerySnapshot<T1> {
  _FakeQuerySnapshot_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuery_7<T extends Object?> extends _i1.SmartFake
    implements _i4.Query<T> {
  _FakeQuery_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_8<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_9<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProviderContainer_10 extends _i1.SmartFake
    implements _i6.ProviderContainer {
  _FakeProviderContainer_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeepAliveLink_11 extends _i1.SmartFake implements _i6.KeepAliveLink {
  _FakeKeepAliveLink_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProviderSubscription_12<State1> extends _i1.SmartFake
    implements _i6.ProviderSubscription<State1> {
  _FakeProviderSubscription_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocal extends _i1.Mock implements _i7.UserLocal {
  @override
  _i5.Future<_i2.UserModel> getUserById(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [uid]),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(this, Invocation.method(#getUserById, [uid])),
            ),
            returnValueForMissingStub: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(this, Invocation.method(#getUserById, [uid])),
            ),
          )
          as _i5.Future<_i2.UserModel>);

  @override
  _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>> updateUser({
    required _i2.UserModel? user,
    required _i10.File? file,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [], {#user: user, #file: file}),
            returnValue:
                _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, _i2.UserModel>>(
                    this,
                    Invocation.method(#updateUser, [], {
                      #user: user,
                      #file: file,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, _i2.UserModel>>(
                    this,
                    Invocation.method(#updateUser, [], {
                      #user: user,
                      #file: file,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>>);

  @override
  _i5.Future<_i8.Either<_i9.Failure, void>> add({
    required _i2.UserModel? user,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#add, [], {#user: user}),
            returnValue: _i5.Future<_i8.Either<_i9.Failure, void>>.value(
              _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                this,
                Invocation.method(#add, [], {#user: user}),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i8.Either<_i9.Failure, void>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                    this,
                    Invocation.method(#add, [], {#user: user}),
                  ),
                ),
          )
          as _i5.Future<_i8.Either<_i9.Failure, void>>);
}

/// A class which mocks [UserApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApi extends _i1.Mock implements _i12.UserApi {
  @override
  _i5.Future<_i2.UserModel> getUserById(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [uid]),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(this, Invocation.method(#getUserById, [uid])),
            ),
            returnValueForMissingStub: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(this, Invocation.method(#getUserById, [uid])),
            ),
          )
          as _i5.Future<_i2.UserModel>);

  @override
  _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>> updateUser({
    required _i2.UserModel? user,
    required _i10.File? file,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [], {#user: user, #file: file}),
            returnValue:
                _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, _i2.UserModel>>(
                    this,
                    Invocation.method(#updateUser, [], {
                      #user: user,
                      #file: file,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, _i2.UserModel>>(
                    this,
                    Invocation.method(#updateUser, [], {
                      #user: user,
                      #file: file,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i8.Either<_i9.Failure, _i2.UserModel>>);

  @override
  _i5.Future<_i8.Either<_i9.Failure, void>> add({
    required _i2.UserModel? user,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#add, [], {#user: user}),
            returnValue: _i5.Future<_i8.Either<_i9.Failure, void>>.value(
              _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                this,
                Invocation.method(#add, [], {#user: user}),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i8.Either<_i9.Failure, void>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                    this,
                    Invocation.method(#add, [], {#user: user}),
                  ),
                ),
          )
          as _i5.Future<_i8.Either<_i9.Failure, void>>);
}

/// A class which mocks [BudgetLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetLocal extends _i1.Mock implements _i13.BudgetLocal {
  @override
  _i5.Future<List<_i14.BudgetModel>> fetch(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#fetch, [uid]),
            returnValue: _i5.Future<List<_i14.BudgetModel>>.value(
              <_i14.BudgetModel>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i14.BudgetModel>>.value(
              <_i14.BudgetModel>[],
            ),
          )
          as _i5.Future<List<_i14.BudgetModel>>);

  @override
  _i5.Future<_i8.Either<_i9.Failure, void>> addBudget({
    required _i14.BudgetModel? model,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addBudget, [], {#model: model}),
            returnValue: _i5.Future<_i8.Either<_i9.Failure, void>>.value(
              _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                this,
                Invocation.method(#addBudget, [], {#model: model}),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i8.Either<_i9.Failure, void>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                    this,
                    Invocation.method(#addBudget, [], {#model: model}),
                  ),
                ),
          )
          as _i5.Future<_i8.Either<_i9.Failure, void>>);

  @override
  _i5.Future<_i8.Either<_i9.Failure, void>> updateBudget({
    required _i14.BudgetModel? model,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateBudget, [], {#model: model}),
            returnValue: _i5.Future<_i8.Either<_i9.Failure, void>>.value(
              _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                this,
                Invocation.method(#updateBudget, [], {#model: model}),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i8.Either<_i9.Failure, void>>.value(
                  _i11.dummyValue<_i8.Either<_i9.Failure, void>>(
                    this,
                    Invocation.method(#updateBudget, [], {#model: model}),
                  ),
                ),
          )
          as _i5.Future<_i8.Either<_i9.Failure, void>>);
}

/// A class which mocks [TransactionLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionLocal extends _i1.Mock implements _i15.TransactionLocal {
  @override
  _i5.Future<_i8.Either<_i9.Failure, (_i2.UserModel, _i16.TransactionModel)>>
  updateWallet({
    required _i2.UserModel? user,
    required int? newValue,
    required String? note,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateWallet, [], {
              #user: user,
              #newValue: newValue,
              #note: note,
            }),
            returnValue: _i5.Future<
              _i8.Either<_i9.Failure, (_i2.UserModel, _i16.TransactionModel)>
            >.value(
              _i11.dummyValue<
                _i8.Either<_i9.Failure, (_i2.UserModel, _i16.TransactionModel)>
              >(
                this,
                Invocation.method(#updateWallet, [], {
                  #user: user,
                  #newValue: newValue,
                  #note: note,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<
              _i8.Either<_i9.Failure, (_i2.UserModel, _i16.TransactionModel)>
            >.value(
              _i11.dummyValue<
                _i8.Either<_i9.Failure, (_i2.UserModel, _i16.TransactionModel)>
              >(
                this,
                Invocation.method(#updateWallet, [], {
                  #user: user,
                  #newValue: newValue,
                  #note: note,
                }),
              ),
            ),
          )
          as _i5.Future<
            _i8.Either<_i9.Failure, (_i2.UserModel, _i16.TransactionModel)>
          >);

  @override
  _i5.Future<
    _i8.Either<
      _i9.Failure,
      (_i16.TransactionModel, _i14.BudgetModel, _i2.UserModel)
    >
  >
  addBudgetTransaction({
    required _i2.UserModel? user,
    required _i14.BudgetModel? budgetModel,
    required int? amount,
    required String? note,
    required DateTime? transactionDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addBudgetTransaction, [], {
              #user: user,
              #budgetModel: budgetModel,
              #amount: amount,
              #note: note,
              #transactionDate: transactionDate,
            }),
            returnValue: _i5.Future<
              _i8.Either<
                _i9.Failure,
                (_i16.TransactionModel, _i14.BudgetModel, _i2.UserModel)
              >
            >.value(
              _i11.dummyValue<
                _i8.Either<
                  _i9.Failure,
                  (_i16.TransactionModel, _i14.BudgetModel, _i2.UserModel)
                >
              >(
                this,
                Invocation.method(#addBudgetTransaction, [], {
                  #user: user,
                  #budgetModel: budgetModel,
                  #amount: amount,
                  #note: note,
                  #transactionDate: transactionDate,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<
              _i8.Either<
                _i9.Failure,
                (_i16.TransactionModel, _i14.BudgetModel, _i2.UserModel)
              >
            >.value(
              _i11.dummyValue<
                _i8.Either<
                  _i9.Failure,
                  (_i16.TransactionModel, _i14.BudgetModel, _i2.UserModel)
                >
              >(
                this,
                Invocation.method(#addBudgetTransaction, [], {
                  #user: user,
                  #budgetModel: budgetModel,
                  #amount: amount,
                  #note: note,
                  #transactionDate: transactionDate,
                }),
              ),
            ),
          )
          as _i5.Future<
            _i8.Either<
              _i9.Failure,
              (_i16.TransactionModel, _i14.BudgetModel, _i2.UserModel)
            >
          >);

  @override
  _i5.Future<List<_i16.TransactionModel>> fetchTransaction(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTransaction, [uid]),
            returnValue: _i5.Future<List<_i16.TransactionModel>>.value(
              <_i16.TransactionModel>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i16.TransactionModel>>.value(
                  <_i16.TransactionModel>[],
                ),
          )
          as _i5.Future<List<_i16.TransactionModel>>);

  @override
  _i5.Future<List<_i16.TransactionModel>> getTransactionsByBudgetId({
    required String? uid,
    required String? budgetId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactionsByBudgetId, [], {
              #uid: uid,
              #budgetId: budgetId,
            }),
            returnValue: _i5.Future<List<_i16.TransactionModel>>.value(
              <_i16.TransactionModel>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i16.TransactionModel>>.value(
                  <_i16.TransactionModel>[],
                ),
          )
          as _i5.Future<List<_i16.TransactionModel>>);

  @override
  _i5.Future<List<_i16.TransactionModel>> fetchTransactionOfMonth({
    required String? uid,
    required DateTime? dateTime,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTransactionOfMonth, [], {
              #uid: uid,
              #dateTime: dateTime,
            }),
            returnValue: _i5.Future<List<_i16.TransactionModel>>.value(
              <_i16.TransactionModel>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i16.TransactionModel>>.value(
                  <_i16.TransactionModel>[],
                ),
          )
          as _i5.Future<List<_i16.TransactionModel>>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  @override
  _i3.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_1(this, Invocation.getter(#app)),
            returnValueForMissingStub: _FakeFirebaseApp_1(
              this,
              Invocation.getter(#app),
            ),
          )
          as _i3.FirebaseApp);

  @override
  set app(_i3.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  String get databaseURL =>
      (super.noSuchMethod(
            Invocation.getter(#databaseURL),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#databaseURL),
            ),
            returnValueForMissingStub: _i11.dummyValue<String>(
              this,
              Invocation.getter(#databaseURL),
            ),
          )
          as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
    Invocation.setter(#databaseURL, _databaseURL),
    returnValueForMissingStub: null,
  );

  @override
  String get databaseId =>
      (super.noSuchMethod(
            Invocation.getter(#databaseId),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#databaseId),
            ),
            returnValueForMissingStub: _i11.dummyValue<String>(
              this,
              Invocation.getter(#databaseId),
            ),
          )
          as String);

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
    Invocation.setter(#databaseId, _databaseId),
    returnValueForMissingStub: null,
  );

  @override
  set settings(_i4.Settings? settings) => super.noSuchMethod(
    Invocation.setter(#settings, settings),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Settings get settings =>
      (super.noSuchMethod(
            Invocation.getter(#settings),
            returnValue: _FakeSettings_2(this, Invocation.getter(#settings)),
            returnValueForMissingStub: _FakeSettings_2(
              this,
              Invocation.getter(#settings),
            ),
          )
          as _i4.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
            returnValueForMissingStub: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_3<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
            returnValueForMissingStub:
                _FakeCollectionReference_3<Map<String, dynamic>>(
                  this,
                  Invocation.method(#collection, [collectionPath]),
                ),
          )
          as _i4.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.WriteBatch batch() =>
      (super.noSuchMethod(
            Invocation.method(#batch, []),
            returnValue: _FakeWriteBatch_4(this, Invocation.method(#batch, [])),
            returnValueForMissingStub: _FakeWriteBatch_4(
              this,
              Invocation.method(#batch, []),
            ),
          )
          as _i4.WriteBatch);

  @override
  _i5.Future<void> clearPersistence() =>
      (super.noSuchMethod(
            Invocation.method(#clearPersistence, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> enablePersistence([
    _i4.PersistenceSettings? persistenceSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#enablePersistence, [persistenceSettings]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i4.LoadBundleTask loadBundle(_i17.Uint8List? bundle) =>
      (super.noSuchMethod(
            Invocation.method(#loadBundle, [bundle]),
            returnValue: _FakeLoadBundleTask_5(
              this,
              Invocation.method(#loadBundle, [bundle]),
            ),
            returnValueForMissingStub: _FakeLoadBundleTask_5(
              this,
              Invocation.method(#loadBundle, [bundle]),
            ),
          )
          as _i4.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #useFirestoreEmulator,
      [host, port],
      {#sslEnabled: sslEnabled, #automaticHostMapping: automaticHostMapping},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i4.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i4.GetOptions? options = const _i4.GetOptions(),
    required _i4.FromFirestore<T>? fromFirestore,
    required _i4.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #namedQueryWithConverterGet,
              [name],
              {
                #options: options,
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              },
            ),
            returnValue: _i5.Future<_i4.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_6<T>(
                this,
                Invocation.method(
                  #namedQueryWithConverterGet,
                  [name],
                  {
                    #options: options,
                    #fromFirestore: fromFirestore,
                    #toFirestore: toFirestore,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i4.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_6<T>(
                this,
                Invocation.method(
                  #namedQueryWithConverterGet,
                  [name],
                  {
                    #options: options,
                    #fromFirestore: fromFirestore,
                    #toFirestore: toFirestore,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i4.QuerySnapshot<T>>);

  @override
  _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i4.GetOptions? options = const _i4.GetOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#namedQueryGet, [name], {#options: options}),
            returnValue:
                _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_6<Map<String, dynamic>>(
                    this,
                    Invocation.method(
                      #namedQueryGet,
                      [name],
                      {#options: options},
                    ),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_6<Map<String, dynamic>>(
                    this,
                    Invocation.method(
                      #namedQueryGet,
                      [name],
                      {#options: options},
                    ),
                  ),
                ),
          )
          as _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
            Invocation.method(#collectionGroup, [collectionPath]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#collectionGroup, [collectionPath]),
            ),
            returnValueForMissingStub: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#collectionGroup, [collectionPath]),
            ),
          )
          as _i4.Query<Map<String, dynamic>>);

  @override
  _i5.Future<void> disableNetwork() =>
      (super.noSuchMethod(
            Invocation.method(#disableNetwork, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [documentPath]),
            returnValue: _FakeDocumentReference_8<Map<String, dynamic>>(
              this,
              Invocation.method(#doc, [documentPath]),
            ),
            returnValueForMissingStub:
                _FakeDocumentReference_8<Map<String, dynamic>>(
                  this,
                  Invocation.method(#doc, [documentPath]),
                ),
          )
          as _i4.DocumentReference<Map<String, dynamic>>);

  @override
  _i5.Future<void> enableNetwork() =>
      (super.noSuchMethod(
            Invocation.method(#enableNetwork, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(
            Invocation.method(#snapshotsInSync, []),
            returnValue: _i5.Stream<void>.empty(),
            returnValueForMissingStub: _i5.Stream<void>.empty(),
          )
          as _i5.Stream<void>);

  @override
  _i5.Future<T> runTransaction<T>(
    _i4.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runTransaction,
              [transactionHandler],
              {#timeout: timeout, #maxAttempts: maxAttempts},
            ),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runTransaction,
                      [transactionHandler],
                      {#timeout: timeout, #maxAttempts: maxAttempts},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_9<T>(
                  this,
                  Invocation.method(
                    #runTransaction,
                    [transactionHandler],
                    {#timeout: timeout, #maxAttempts: maxAttempts},
                  ),
                ),
            returnValueForMissingStub:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runTransaction,
                      [transactionHandler],
                      {#timeout: timeout, #maxAttempts: maxAttempts},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_9<T>(
                  this,
                  Invocation.method(
                    #runTransaction,
                    [transactionHandler],
                    {#timeout: timeout, #maxAttempts: maxAttempts},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<void> terminate() =>
      (super.noSuchMethod(
            Invocation.method(#terminate, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(
            Invocation.method(#waitForPendingWrites, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setIndexConfiguration({
    required List<_i4.Index>? indexes,
    List<_i4.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setIndexConfiguration, [], {
              #indexes: indexes,
              #fieldOverrides: fieldOverrides,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
            Invocation.method(#setIndexConfigurationFromJSON, [json]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i6.Ref<State> {
  @override
  _i6.ProviderContainer get container =>
      (super.noSuchMethod(
            Invocation.getter(#container),
            returnValue: _FakeProviderContainer_10(
              this,
              Invocation.getter(#container),
            ),
            returnValueForMissingStub: _FakeProviderContainer_10(
              this,
              Invocation.getter(#container),
            ),
          )
          as _i6.ProviderContainer);

  @override
  T refresh<T>(_i6.Refreshable<T>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#refresh, [provider]),
            returnValue: _i11.dummyValue<T>(
              this,
              Invocation.method(#refresh, [provider]),
            ),
            returnValueForMissingStub: _i11.dummyValue<T>(
              this,
              Invocation.method(#refresh, [provider]),
            ),
          )
          as T);

  @override
  void invalidate(_i6.ProviderOrFamily? provider) => super.noSuchMethod(
    Invocation.method(#invalidate, [provider]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  void listenSelf(
    void Function(State?, State)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  void invalidateSelf() => super.noSuchMethod(
    Invocation.method(#invalidateSelf, []),
    returnValueForMissingStub: null,
  );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
    Invocation.method(#onAddListener, [cb]),
    returnValueForMissingStub: null,
  );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
    Invocation.method(#onRemoveListener, [cb]),
    returnValueForMissingStub: null,
  );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
    Invocation.method(#onResume, [cb]),
    returnValueForMissingStub: null,
  );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
    Invocation.method(#onCancel, [cb]),
    returnValueForMissingStub: null,
  );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
    Invocation.method(#onDispose, [cb]),
    returnValueForMissingStub: null,
  );

  @override
  T read<T>(_i6.ProviderListenable<T>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#read, [provider]),
            returnValue: _i11.dummyValue<T>(
              this,
              Invocation.method(#read, [provider]),
            ),
            returnValueForMissingStub: _i11.dummyValue<T>(
              this,
              Invocation.method(#read, [provider]),
            ),
          )
          as T);

  @override
  bool exists(_i6.ProviderBase<Object?>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [provider]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  T watch<T>(_i6.ProviderListenable<T>? provider) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [provider]),
            returnValue: _i11.dummyValue<T>(
              this,
              Invocation.method(#watch, [provider]),
            ),
            returnValueForMissingStub: _i11.dummyValue<T>(
              this,
              Invocation.method(#watch, [provider]),
            ),
          )
          as T);

  @override
  _i6.KeepAliveLink keepAlive() =>
      (super.noSuchMethod(
            Invocation.method(#keepAlive, []),
            returnValue: _FakeKeepAliveLink_11(
              this,
              Invocation.method(#keepAlive, []),
            ),
            returnValueForMissingStub: _FakeKeepAliveLink_11(
              this,
              Invocation.method(#keepAlive, []),
            ),
          )
          as _i6.KeepAliveLink);

  @override
  _i6.ProviderSubscription<T> listen<T>(
    _i6.ProviderListenable<T>? provider,
    void Function(T?, T)? listener, {
    void Function(Object, StackTrace)? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listen,
              [provider, listener],
              {#onError: onError, #fireImmediately: fireImmediately},
            ),
            returnValue: _FakeProviderSubscription_12<T>(
              this,
              Invocation.method(
                #listen,
                [provider, listener],
                {#onError: onError, #fireImmediately: fireImmediately},
              ),
            ),
            returnValueForMissingStub: _FakeProviderSubscription_12<T>(
              this,
              Invocation.method(
                #listen,
                [provider, listener],
                {#onError: onError, #fireImmediately: fireImmediately},
              ),
            ),
          )
          as _i6.ProviderSubscription<T>);
}
