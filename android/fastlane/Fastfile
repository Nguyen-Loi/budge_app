
default_platform(:android)

require 'ostruct'

platform :android do
  desc "Deploy a new version to the Google Play"
  lane :deploy do |options|
    mode_distribute = "alpha" # "internal", "alpha", "beta", "production"
    newVersion = updateVersion(options)

    gradle(
      task: 'bundle',
      build_type: 'Release',
      flags: '--stacktrace'
    )
    
    upload_to_play_store(
      track: mode_distribute, 
      skip_upload_changelogs: true,
      skip_upload_metadata: true,
      aab: '../build/app/outputs/bundle/release/app-release.aab',
    )
    push_git_tag(newVersion)
  end
end

def increment_version_code
  path = '../app/build.gradle'
  re = /versionCode\s+(\d+)/

  s = File.read(path)
  versionCode = s[re, 1].to_i
  s[re, 1] = (versionCode + 1).to_s

  f = File.new(path, 'w')
  f.write(s)
  f.close
end

def current_version
  path = '../app/build.gradle'
  re = /versionName\s+("\d+.\d+.\d+")/
  s = File.read(path)
  versionName = s[re, 1].gsub!('"', '').split('.')
  return versionName.join(".")
end

def increment_version_number(bump_type: nil, version_number: nil)
  path = '../app/build.gradle'
  re = /versionName\s+("\d+.\d+.\d+")/
  s = File.read(path)
  versionName = s[re, 1].gsub!('"', '').split('.')

  major = versionName[0].to_i
  minor = versionName[1].to_i
  patch = versionName[2].to_i

  if bump_type == 'major'
    major += 1
    minor = 0
    patch = 0
  elsif bump_type == 'minor'
    minor += 1
    patch = 0
  elsif bump_type == 'patch'
    patch += 1
  end

  s[re, 1] = if version_number
               "\"#{version_number}\""
             else
               "\"#{major}.#{minor}.#{patch}\""
             end

  f = File.new(path, 'w')
  f.write(s)
  f.close
  increment_version_code
end

def updateVersion(options)
  version = options[:version] || prompt(text: "Current version app is #{current_version}\nEnter the version type or specific version\n(major, minor, patch or 1.0.0): ")

  re = /\d+.\d+.\d+/
  versionNum = version[re, 0]

  if versionNum
    increment_version_number(
      version_number: versionNum
    )
  elsif %w[major minor patch].include?(version)
    increment_version_number(
      bump_type: version
    )
  else
    UI.user_error!('[ERROR] Wrong version!!!!!!')
  end
  
  return version
end

def push_git_tag(version)
  add_git_tag(
    tag: "GooglePlay_#{version}"
  )
  push_to_git_remote
end